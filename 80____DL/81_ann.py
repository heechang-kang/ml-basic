# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U6_s2vzPSiYENruvTamefzXQk2zJaMDL
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Preprocess"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:13].values
y = dataset.iloc[:, 13].values
X

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
# Country
labelencoder_X_1 = LabelEncoder()
X[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])
# Sex : male, female
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
# encoded numeric values -> categorical
onehotencoder = OneHotEncoder(categorical_features = [1])
X = onehotencoder.fit_transform(X).toarray()
X = X[:, 1:]

"""### dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## ANN"""

import keras
from keras.models import Sequential
from keras.layers import Dense # randomly initialize weights

# classifier 
# hiddenLayers: ractoid ,, outputLayers: sigmoid
classifier = Sequential()
# Hidden layers
  # inputLayer & 1st hiddenLayer
classifier.add(Dense(input_dim=11,
                     output_dim=6, 
                     init='uniform',
                     activation='relu'
              ))
  # 2nd hiddenLayer
classifier.add(Dense(output_dim=6, 
                     init='uniform',# weights
                     activation='relu'
              ))

# outputLayer
classifier.add(Dense(output_dim=1, 
                     init='uniform',# weights
                     activation='sigmoid'
              ))

# Compile the model
classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

classifier.fit(X_train, y_train,
               batch_size=10,
               nb_epoch=10)

"""## Predict and Evaluate"""

y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)
print(y_pred)

# confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
# accuracy
acc = (cm[0][0]+cm[1][1]) / 2000
print(acc)

